conditions: v1

os: linux
dist: xenial

language: python
python:
- 2.7
- 3.5
- 3.6
- 3.7
- 3.8
- &mainstream_python 3.9
- nightly

install:
- travis_retry pip install -U --upgrade-strategy=eager --pre -e .[testing,webassets]
- travis_retry pip install 'pycparser==2.18'
- travis_retry pip install 'coveralls'

script:
- pytest -v --cov=dukpy  --cov-report=term-missing
- if python -c "import sys; sys.exit(sys.version_info < (2,7))"; then
      python setup.py check -rm;
  fi
- if python -c "import sys; sys.exit(sys.version_info < (3,6))"; then
      python setup.py check -s;
  fi

after_success:
- coveralls

stages:
- test
- name: deploy
  if: tag IS present

before_cache:
- rm -f $HOME/.cache/pip/log/debug.log

env:
  global:
    GIT_INSTALLER_DIR_PATH: ${HOME}/.git-installers
    GIT_VERSION: 2.20.1
    PYTHON_INSTALLER_DIR_PATH: ${HOME}/.python-installers

.mixtures:
- &macos-job
  os: osx
  osx_image: xcode8.3
  language: generic
  cache:
    directories:
    - $HOME/Library/Caches/Homebrew
    - $PYTHON_INSTALLER_DIR_PATH
    - $GIT_INSTALLER_DIR_PATH
  before_install: &install-from-python_org
  - |
    function probe_url() {
      local py_ver="$1"
      [ $(curl -I --write-out '%{http_code}' --silent --output /dev/null "https://www.python.org/ftp/python/${py_ver}/python-${py_ver}-macosx10.9.pkg") == '200' ] && return 0
      return 1
    }
  - |
    function find_last_macos_py() {
    for py_ver in $*
    do
      >&2 echo Probing $py_ver
      probe_url $py_ver && >&2 echo "Found pkg: ${py_ver}" && echo $py_ver && return 0
    done
    >&2 echo Failed looking up macOS pkg for $*
    return 1
    }
  - export GIT_DMG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.dmg"
  - export GIT_PKG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.pkg"
  - export GIT_DMG_PATH="${GIT_INSTALLER_DIR_PATH}/${GIT_DMG_NAME}"
  - >
    stat "${GIT_DMG_PATH}" &>/dev/null || wget -O "${GIT_DMG_PATH}" "https://sourceforge.net/projects/git-osx-installer/files/${GIT_DMG_NAME}/download?use_mirror=autoselect"
  - stat "${GIT_DMG_PATH}" >/dev/null
  - sudo hdiutil attach ${GIT_DMG_PATH}
  - hdiutil info
  - >
    export GIT_INSTALLER_VOLUME=$(hdiutil info | tail -n1 | sed 's#^.*\(/Volumes.*\)#\1#')
  - >
    export GIT_INSTALLER_PATH="${GIT_INSTALLER_VOLUME}/${GIT_PKG_NAME}"
  - ls -alh "${GIT_INSTALLER_VOLUME}"
  - sudo installer -verboseR -dumplog -pkg "${GIT_INSTALLER_PATH}" -target /
  - sudo hdiutil detach "${GIT_INSTALLER_VOLUME}"
  - export PYTHON_VERSION_LONG_SUGGESTIONS=$(git ls-remote --sort -v:refname --tags git://github.com/python/cpython.git "${PYTHON_VERSION}*" "v${PYTHON_VERSION}*" | grep -v '\^{}$' | awk '{print$2}' | sed 's#^refs/tags/##;s#^v##' | grep -v '[abcepr]')
  - export PYTHON_VERSION_LONG=$(find_last_macos_py $PYTHON_VERSION_LONG_SUGGESTIONS)
  - export PYTHON_VERSION_SHORT=$(echo ${PYTHON_VERSION_LONG} | awk -F. '{print$1"."$2}')
  - echo "Selected version vars are:"
  - echo "PYTHON_VERSION=${PYTHON_VERSION}"
  - echo "PYTHON_VERSION_SHORT=${PYTHON_VERSION_SHORT}"
  - echo "PYTHON_VERSION_LONG=${PYTHON_VERSION_LONG}"
  - export PYTHON_INSTALL_PATH="/Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALL_EXE="${PYTHON_INSTALL_PATH}/bin/python${PYTHON_VERSION_SHORT}"
  - export PATH="${PYTHON_INSTALL_PATH}/bin:${PATH}"
  - export PYTHON_VENV_PATH="${HOME}/virtualenv/python${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALLER_PATH="${PYTHON_INSTALLER_DIR_PATH}/python-${PYTHON_VERSION_LONG}.pkg"
  - echo "PYTHON_INSTALLER_PATH=${PYTHON_INSTALLER_PATH}"
  - env
  - >
    stat "${PYTHON_INSTALLER_PATH}" &>/dev/null || wget -O "${PYTHON_INSTALLER_PATH}" "https://www.python.org/ftp/python/${PYTHON_VERSION_LONG}/python-${PYTHON_VERSION_LONG}-macosx10.9.pkg"
  - stat "${PYTHON_INSTALLER_PATH}" >/dev/null
  - sudo installer -verboseR -dumplog -pkg "${PYTHON_INSTALLER_PATH}" -target /
  - ls "${PYTHON_INSTALL_PATH}/bin"
  - ls -lh "${PYTHON_INSTALL_EXE}"
  - stat "${PYTHON_INSTALL_EXE}"
  - /Applications/Python\ ${PYTHON_VERSION_SHORT}/Install\ Certificates.command || echo "No need to fix certificates"
  - if [ "2.7" = "$PYTHON_VERSION" ]; then curl https://bootstrap.pypa.io/pip/2.7/get-pip.py | ${PYTHON_INSTALL_EXE}; else curl https://bootstrap.pypa.io/get-pip.py | ${PYTHON_INSTALL_EXE}; fi
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U pip
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U virtualenv
  - >
    "${PYTHON_INSTALL_EXE}" -m virtualenv "${PYTHON_VENV_PATH}"
  - . "${PYTHON_VENV_PATH}/bin/activate"
  - if [ "2.7" = "$PYTHON_VERSION" ]; then curl https://bootstrap.pypa.io/pip/2.7/get-pip.py | python; else curl https://bootstrap.pypa.io/get-pip.py | python; fi
  - python --version
  - pip --version

jobs:
  fast_finish: true
  allow_failures:
  - python: nightly

  include:
  - <<: *macos-job
    name: Running tests against Python 3.8 env under macOS 10.13
    env:
      PYTHON_VERSION: 3.8
  - <<: *macos-job
    name: Running tests against Python 3.7 env under macOS 10.13
    env:
      PYTHON_VERSION: 3.7
  - <<: *macos-job
    name: Running tests against Python 2.7 env under macOS 10.13
    env:
      PYTHON_VERSION: 2.7
  - <<: *macos-job
    name: Running tests against Python 3.6 env under macOS 10.13
    env:
      PYTHON_VERSION: 3.6

  - stage: deploy
    python: *mainstream_python
    install: skip
    services:
    - docker
    script:
    - .github/run-docker.sh "dukpy"
    deploy:
      provider: pypi
      # `skip_cleanup: true` is required to preserve binary wheels, built
      # inside of manylinux1 docker container during `script` step above.
      skip_cleanup: true
      # Although Travis CI instructs `setup.py` to build source distribution,
      # which is default value for distribution option (`distribution: sdist`),
      # it will also upload all wheels we've previously built in manylinux1
      # docker container using `twine upload -r pypi dist/*` command.
      # Also since commit https://github.com/travis-ci/dpl/commit/90b5e39
      # it is default that Travis PYPI provider has `skip_upload_docs: true`
      # set by default.
      # Besides above, we don't do cleanup of `dist/*`, because it's being done
      # by Travis CI PYPI deployment provider after upload, unconditionally.
      on:
        tags: true
        all_branches: true
      user: amol
      # just source dist, because binary wheels are built within docker
      distributions: sdist
      password:
        secure: g8mh+wysPGF9VaxHsP/FYjjw+CJ8TJpRKRVQIAi7DRy3yn05lsvfwqHBvKMIOZV26JmI8vxiwCPt0IcsBONzRrKuVp0nS0yXLmaaHH2SIOhZaYLknm1eD9AV7T79Z0uWG7ygFXoCCvkJGiOjZkfrakwYVqvIg9tFCvukJaWLHl8=
